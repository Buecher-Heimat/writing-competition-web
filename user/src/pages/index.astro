---
import { PenTool } from "lucide-vue-next";
import CompetitionCard from "../components/CompetitionCard.astro";
import CompetitionCardSmall from "../components/CompetitionCardSmall.astro";
import GuideStep from "../components/GuideStep.astro";
import SummaryPoint from "../components/SummaryPoint.astro";
import Layout from "../layouts/Layout.astro";
import PostCard from "../components/PostCard.astro";

import {
  ArrowLeft,
  ArrowRight,
  ArrowDown,
  Medal,
  Laptop,
  Book,
} from "lucide-vue-next";
import {
  fetchCompetitions,
  fetchRecentPosts,
  fetchInstructionSteps,
} from "../lib/api";
import type { Competition, InstructionStep, Media, Post } from "../payload";

let recentPosts: Post[] = [];
let competitions: Competition[] = [];
let instructionstep: InstructionStep = { steps: [], id: "" };

try {
  recentPosts = await fetchRecentPosts();
  competitions = await fetchCompetitions();
  instructionstep = await fetchInstructionSteps();
} catch (error) {
  console.error(error);
}

function getRunningCompetitions(competitions: Competition[]) {
  return competitions.filter((competition) => {
    const now = new Date();
    return (
      now >= new Date(competition.date_start) &&
      now <= new Date(competition.date_end)
    );
  });
}

function getUpcomingCompetitions(competitions: Competition[]) {
  return competitions
    .filter((competition) => {
      const now = new Date();
      return now < new Date(competition.date_start);
    })
    .reverse();
}

function getPastCompetitions(competitions: Competition[]) {
  return competitions.filter((competition) => {
    const now = new Date();
    return now > new Date(competition.date_end);
  });
}

function getPromotedCompetition(competitions: Competition[]) {
  // When running competitions are available, return the first one
  const runningCompetitions = getRunningCompetitions(competitions);
  if (runningCompetitions.length > 0) {
    return runningCompetitions[0];
  } else {
    // When no running competitions are available, return the first upcoming one
    const upcomingCompetitions = getUpcomingCompetitions(competitions);
    if (upcomingCompetitions.length > 0) {
      return upcomingCompetitions[0];
    } else {
      // When no upcoming competitions are available, return the first past one
      const pastCompetitions = getPastCompetitions(competitions);
      if (pastCompetitions.length > 0) {
        return pastCompetitions[0];
      }
    }
  }
}

const promotedCompetition = getPromotedCompetition(competitions);

const runningCompetitions = getRunningCompetitions(competitions);
const upcomingCompetitions = getUpcomingCompetitions(competitions);
const pastCompetitions = getPastCompetitions(competitions);
---

<Layout title="Schreibwettbewerbe Bad Harzburg">
  <section
    class="min-h-[95vh] md:pt-32 w-screen flex flex-row items-center justify-center relative px-5"
  >
    <div class="absolute w-full h-full z-0 md:hidden">
      <img
        class="absolute left-[35%] top-16 lg:w-28"
        src="/images/shapes/three.svg"
        alt="Shapes"
      />
      <img
        class="absolute left-[8%] top-[30%] lg:w-16"
        src="/images/shapes/two1.svg"
        alt="Some shapes"
      />
      <img
        class="absolute left-[-4%] bottom-0 lg:w-28 -rotate-45"
        src="/images/shapes/three.svg"
        alt="Some shapes"
      />
      <img
        class="absolute right-[50%] bottom-10 lg:w-28 rotate-12"
        src="/images/shapes/one.svg"
        alt="Some shapes"
      />
    </div>
    <div
      class="absolute top-0 right-0 bottom-0 z-0 w-[40%] lg:top-auto lg:left-0 lg:w-full lg:h-56"
    >
      <img
        class="h-full z-0 relative w-full object-cover object-center"
        src={promotedCompetition
          ? import.meta.env.PUBLIC_BACKEND_URL +
            (promotedCompetition.image_hero as Media)?.url
          : "/images/baustelle.png"}
        alt="Ein Blick auf die Baustelle der B4 in Bad Harzburg"
      />
      <div
        class="bg-gradient-to-r lg:bg-gradient-to-b from-pearl-bush-100 to-transparent w-full h-full absolute top-0 right-0 bottom-0"
      >
      </div>
    </div>
    <div
      class="flex flex-row gap-20 w-[75%] xl:w-[90%] md:w-full md:flex-col justify-between z-10 items-center"
    >
      <div
        class="w-min border-l-4 border-twine-400 pl-5 flex flex-col justify-between py-3 lg:w-1/2 sm:w-full sm:p-0 sm:border-none"
      >
        <div>
          <h1
            class="text-twine-400 font-bold flex flex-col font-serif small-caps text-7xl lg:text-4xl"
          >
            Schreib! <span class="uppercase font-sans font-light italic"
              >Wettbewerbe</span
            >
          </h1>
          <h2
            class="text-3xl lg:text-xl font-bold small-caps text-bandicoot-400 mt-3"
          >
            Bad Harzburg
          </h2>
        </div>

        <div>
          <p class="mb-5 mt-5 font-serif leading-5 lg:text-sm">
            Buchstaben im Kopf? Sei dabei und teile Deine einzigartige
            Geschichte bei einem unserer Schreibwettbewerbe mit uns! Wir suchen
            nach inspirierenden Erzählungen, kreativen Ideen und Deinem ganz
            persönlichen Schreibstil.
          </p>
          <a href="#darum-gehts">
            <button
              class="hover:bg-bandicoot-400 hover:text-pearl-bush-100 transition-colors ease-out duration-500 sm:text-sm font-serif font flex flex-row gap-2 items-center rounded-lg border-[1px] w-[fit-content] py-2 px-4 font-semibold border-bandicoot-400 text-bandicoot-400"
            >
              Mehr erfahren
              <ArrowDown size="1rem" />
            </button>
          </a>
        </div>
      </div>
      <div class="pr-40 xl:pr-0 lg:pr-0 md:pb-20 sm:w-full">
        {
          promotedCompetition && (
            <CompetitionCardSmall competition={promotedCompetition} />
          )
        }
      </div>
    </div>
  </section>
  <section id="darum-gehts" class="w-full">
    <div class="w-full h-2 bg-bandicoot-400 opacity-20"></div>
    <div class="w-full h-2 bg-bandicoot-400 opacity-50"></div>
    <div
      class="w-full bg-bandicoot-400 py-16 flex justify-center flex-col items-center gap-16"
    >
      <h1 class="small-caps font-serif text-3xl font-bold text-pearl-bush-100">
        Und darum geht's
      </h1>
      <div class="flex justify-evenly w-full flex-wrap sm:gap-10">
        <SummaryPoint
          text="Du schreibst einen fesselnden Text zu einem Thema Deiner Wahl"
          Icon={PenTool}
        />
        <SummaryPoint
          text="Bei einem unserer Wettbewerbe kannst Du Deinen Text einreichen"
          Icon={Medal}
        />
        <SummaryPoint
          text="Alle Texte werden hier auf der  Online-Plattform veröffentlicht"
          Icon={Laptop}
        />
        <SummaryPoint
          text="Die Gewinner jeder Altersgruppe werden in einer Zusammenstellung gedruckt."
          Icon={Book}
        />
      </div>
    </div>
  </section>
  <section
    class="flex max-w-screen min-h-screen lg:flex-col h-[fit-content] overflow-hidden w-full"
  >
    {
      (runningCompetitions.length > 0 ||
        pastCompetitions.length > 0 ||
        upcomingCompetitions.length > 0) && (
        <div class="bg-schreib-pattern relative z-10 bg-no-repeat bg-cover w-[40%] xl:w-[50%] lg:w-full flex-shrink-0 pl-32 pt-32 pr-16 lg:pr-32 pb-16 sm:px-5 bg-twine-400 flex flex-col gap-5">
          <div class="w-full bg-pearl-bush-50 p-5 rounded-2xl shadow-xl">
            <h2 class="small-caps font-serif text-3xl font-bold text-pearl-bush-950">
              Die Wettbewerbe
            </h2>
            <h3 class="font-bold text-bandicoot-400">
              Das sind unsere Wettbewerbe
            </h3>
          </div>
          <div class="flex flex-col gap-5">
            {runningCompetitions.map((competition) => (
              <CompetitionCard competition={competition} />
            ))}
          </div>
          {upcomingCompetitions.length > 0 && (
            <div>
              <h3 class="font-bold text-bandicoot-400 small-caps text-xl bg-pearl-bush-50 p-2 px-5 rounded-lg mb-3">
                Nächster Wettbewerb
              </h3>
              {upcomingCompetitions.slice(0, 1).map((competition) => (
                <CompetitionCard competition={competition} />
              ))}
            </div>
          )}
          {pastCompetitions.length > 0 && (
            <div>
              <h3 class="font-bold text-bandicoot-400 small-caps text-xl bg-pearl-bush-50 p-2 px-5 rounded-lg mb-3">
                Letzter Wettbewerb
              </h3>
              {pastCompetitions.slice(0, 1).map((competition) => (
                <CompetitionCard competition={competition} />
              ))}
            </div>
          )}
        </div>
      )
    }
    {
      instructionstep.steps.length > 0 && (
        <div class="pr-32 lg:pr-16 pt-32 pl-16 pb-16 sm:px-5 relative">
          <div class="pl-16 mb-6 z-10 relative">
            <h2 class="font-serif text-7xl font-black small-caps text-twine-400 sm:text-4xl">
              So geht's
            </h2>
            <h3 class="font-light italic text-bandicoot-400 text-2xl sm:text-lg">
              Es ist eigentlich ganz einfach
            </h3>
          </div>
          <div class="flex flex-col gap-8 z-10 relative">
            {instructionstep.steps.map((step, index) => (
              <GuideStep
                title={step.title}
                textColor="text-bandicoot-400"
                number={index + 1}
                description={step.description}
              />
            ))}
          </div>
          <div class="absolute w-full h-full z-0 md:hidden">
            <img
              class="absolute right-0 top-10 lg:w-28"
              src="/images/shapes/three.svg"
              alt="Shapes"
            />
            <img
              class="absolute right-[8%] bottom-20 lg:w-16"
              src="/images/shapes/two1.svg"
              alt="Some shapes"
            />
            <img
              class="absolute left-[-4%] bottom-0 lg:w-28 -rotate-45"
              src="/images/shapes/three.svg"
              alt="Some shapes"
            />
            <img
              class="absolute right-[50%] -top-32 lg:w-10 rotate-12"
              src="/images/shapes/one.svg"
              alt="Some shapes"
            />
            <img
              class="absolute left-[8%] -top-48 lg:w-16 rotate-45"
              src="/images/shapes/two1.svg"
              alt="Some shapes"
            />
          </div>
        </div>
      )
    }
  </section>
  {
    recentPosts.length > 2 && (
      <section class="flex flex-col items-center justify-center h-[fit-content] bg-bandicoot-400 py-16 w-full">
        <div class="font-serif small-caps text-pearl-bush-100 text-3xl font-bold mb-5 px-5">
          Die neuesten Veröffentlichungen
        </div>
        <div class="flex w-full justify-end px-10 py-4">
          <a
            href="/alle-texte"
            class="font-serif text-pearl-bush-100 font-semibold hover:underline transition-all ease-out duration-500"
          >
            alle Texte lesen
          </a>
        </div>
        <div class="relative">
          <div>
            <div
              id="scroll-left"
              class="absolute left-0 top-0 bottom-0 w-52 bg-gradient-to-r from-bandicoot-400 to-transparent z-10 flex items-center justify-center pr-16 group cursor-pointer lg:w-10"
            >
              <button class="bg-pearl-bush-50 rounded-lg p-3 group-hover:bg-pearl-bush-100 transition-all ease-out duration-500 group-hover:scale-105 lg:hidden">
                <ArrowLeft size="1.6rem" class="text-bandicoot-400" />
              </button>
            </div>
            <div
              id="scroll-right"
              class="absolute right-0 top-0 bottom-0 w-52 bg-gradient-to-l from-bandicoot-400 to-transparent z-10 flex items-center justify-center pl-16 group cursor-pointer lg:w-10"
            >
              <button class="bg-pearl-bush-50 rounded-lg p-3 group-hover:bg-pearl-bush-100 transition-all ease-out duration-500 group-hover:scale-105 lg:hidden">
                <ArrowRight size="1.6rem" class="text-bandicoot-400" />
              </button>
            </div>
          </div>
          <div
            id="post-container"
            class="overflow-x-scroll w-screen scrollbar-hide transition-all ease-out duration-500"
          >
            <div class="w-fit grid gap-5 select-none mx-10">
              {recentPosts.map((post) => (
                <PostCard post={post} />
              ))}
            </div>
          </div>
        </div>
      </section>
    )
  }
  <section
    class="flex flex-col items-center justify-center h-[fit-content] bg-bandicoot-400 pt-16 pb-44 w-full relative px-5"
  >
    <h2
      class="max-w-lg text-center font-serif font-semibold text-pearl-bush-100 text-4xl small-caps mb-10"
    >
      {
        recentPosts.length > 2
          ? "Dein Text soll auch hier stehen?"
          : "Du hast eine Geschichte zu erzählen?"
      }
    </h2>
    <a href="/text-einreichen" class="w-full max-w-sm z-10">
      <button
        class="p-3 font-semibold font-serif text-pearl-bush-50 bg-twine-400 rounded-lg w-full"
        >Mitmachen</button
      >
    </a>
    <div class="absolute w-full h-full z-0 md:hidden">
      <img
        class="absolute right-0 top-[50%] lg:w-28"
        src="/images/shapes/three.svg"
        alt="Shapes"
      />
      <img
        class="absolute left-[8%] top-[30%] lg:w-16"
        src="/images/shapes/two1.svg"
        alt="Some shapes"
      />
      <img
        class="absolute left-[-4%] bottom-0 lg:w-28 -rotate-45"
        src="/images/shapes/three.svg"
        alt="Some shapes"
      />
      <img
        class="absolute left-[20%] -bottom-20 lg:w-28 rotate-45"
        src="/images/shapes/three.svg"
        alt="Some shapes"
      />
      <img
        class="absolute right-[20%] -bottom-20 lg:w-28 rotate-180"
        src="/images/shapes/three.svg"
        alt="Some shapes"
      />
      <img
        class="absolute right-[50%] bottom-5 lg:w-10 rotate-12"
        src="/images/shapes/one.svg"
        alt="Some shapes"
      />
    </div>
  </section>
</Layout>

<script>
  // Scrolle postcontainer so, dass die Mitte des Bildschirms in der Mitte des Containers ist
  const postContainer = document.getElementById("post-container");
  if (postContainer) {
    const grid = document.querySelector(
      "#post-container > .grid"
    ) as HTMLElement;
    if (grid) {
      grid.style.gridTemplateColumns = `repeat(${grid.children.length}, ${window.innerWidth > 540 ? 500 : window.innerWidth - 40}px)`;

      // Set eventlistener for resizing the column width to fit on window resize
      window.addEventListener("resize", () => {
        grid.style.gridTemplateColumns = `repeat(${grid.children.length}, ${window.innerWidth > 540 ? 500 : window.innerWidth - 40}px)`;
      });
    }

    const scrollX = postContainer.scrollWidth / 2 - window.innerWidth / 2;
    postContainer.scrollTo(scrollX, 0);

    // Scrollen mit den Pfeilen
    const scrollLeft = document.getElementById("scroll-left");
    const scrollRight = document.getElementById("scroll-right");
    if (scrollLeft && scrollRight) {
      scrollLeft.addEventListener("click", () => {
        postContainer.scrollTo({
          left: postContainer.scrollLeft - window.innerWidth / 2,
          behavior: "smooth",
        });
      });
      scrollRight.addEventListener("click", () => {
        postContainer.scrollTo({
          left: postContainer.scrollLeft + window.innerWidth / 2,
          behavior: "smooth",
        });
      });

      // Zeige Pfeile nur, wenn scrollen möglich ist
      postContainer.addEventListener("scroll", () => {
        if (postContainer.scrollLeft === 0) {
          // Animate out
          scrollLeft.animate([{ opacity: 1 }, { opacity: 0 }], {
            duration: 300,
            fill: "forwards",
          }).onfinish = () => {
            scrollLeft.style.display = "none";
          };
        } else {
          if (scrollLeft.style.display === "none") {
            scrollLeft.style.display = "flex";
            // Animate in
            scrollLeft.animate([{ opacity: 0 }, { opacity: 1 }], {
              duration: 300,
              fill: "forwards",
            });
          }
        }
        if (
          postContainer.scrollLeft ===
          postContainer.scrollWidth - postContainer.clientWidth
        ) {
          // Animate out
          scrollRight.animate([{ opacity: 1 }, { opacity: 0 }], {
            duration: 300,
            fill: "forwards",
          }).onfinish = () => {
            scrollRight.style.display = "none";
          };
        } else {
          if (scrollRight.style.display === "none") {
            scrollRight.style.display = "flex";
            // Animate in
            scrollRight.animate([{ opacity: 0 }, { opacity: 1 }], {
              duration: 300,
              fill: "forwards",
            });
          }
        }
      });
    }
  }
</script>
